// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum typeFreight {
  CIF
  FOB
}

enum typeProduct {
  caixa
  rolo
  unidade
}

enum categoryProduct {
  cliches
  facas_rotativas
  facas_planas
  facas_graficas
  outros
}

model User {
  id            String          @id
  name          String          @unique
  full_name     String          @unique
  password      String
  isAdmin       Boolean         @default(false)
  Address       Address[]
  refresh_token Refresh_token[]
  Order         Order[]
}

model Address {
  id           Int         @id @default(autoincrement())
  user_id      String
  cep          String      @db.VarChar(8)
  street       String
  number       Int
  complement   String?
  city         String
  neighborhood String?
  state        String      @db.Char(2)
  freight      typeFreight
  active       Boolean     @default(true)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Refresh_token {
  id        String @id
  expiresIn Int
  user_id   String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Product {
  id            Int             @id
  name          String
  toughness     String?
  dimension     String?
  type          typeProduct
  category      categoryProduct
  description   String
  unit_quantity Int?
  unit_value    Float
  Product_image Product_image[]
  Order_details Order_details[]
}

model Product_image {
  id        Int    @id @default(autoincrement())
  productId Int
  image_url String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id           String   @id
  client_id    String
  order_date   DateTime @default(now())
  status       String
  description  String?
  installment  Int
  order_number Int

  client        User            @relation(fields: [client_id], references: [id], onDelete: Cascade)
  Order_details Order_details[]
}

model Order_details {
  id         String @id
  order_id   String
  product_id Int
  quantity   Int
  full_price Float

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}
